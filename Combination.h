#pragma once
#include"ClanCard.h"
#include<iostream>
#include<string>
#include<vector>
//Combinationï¿½ï¿½ï¿½Ê¾ï¿½ï¿½ï¿½ï¿½Ï·ï¿½Ðµï¿½Ò»ï¿½ï¿½ï¿½ï¿½Æ¬ï¿½ï¿½ï¿½ 
class Combination{
private:
    int m_force_combi;
    int m_total_number;
    bool m_mudfight, m_blindbluff;
    int m_first_completed; 
    vector <ClanCard*> m_cards;
public:
    Combination() : m_cards({}), m_force_combi(0), m_total_number(0),
             m_blindbluff(false), m_mudfight(false), m_first_completed(0){}

    Combination(vector<ClanCard*> cards):m_cards({}), m_force_combi(0),
             m_total_number(0), m_blindbluff(false), m_mudfight(false), m_first_completed(0) {
        for (auto card : cards) {
			addCard(card);
		}
    }
    void DeleteCard_Stone(int pos){m_cards.erase(m_cards.begin() + pos);}//ï¿½Æ³ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Î»ï¿½ÃµÄ¿ï¿½Æ¬ 
    vector<ClanCard*> getCards(){return m_cards;}//ï¿½ï¿½ï¿½Ø¿ï¿½Æ¬ï¿½ï¿½ï¿½ï¿½Ðµï¿½ï¿½ï¿½ï¿½Ð¿ï¿½Æ? 
    int getForceCombi() const{return m_force_combi;}//ï¿½ï¿½ï¿½Ø¿ï¿½Æ¬ï¿½ï¿½Ïµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê¾ï¿½ï¿½ï¿½Ç¶ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ç¿ï¿½Èµï¿½ï¿½Ð¶Ï£ï¿½ï¿½ï¿½ï¿½Ç¿ï¿½ï¿½ÆµÄµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð¶ï¿½ï¿½ï¿½cppï¿½Ä¼ï¿½ï¿½ï¿½
    int getTotalNumber() const{return m_total_number;} //ï¿½ï¿½ï¿½Ø¿ï¿½Æ¬ï¿½ï¿½Ïµï¿½ï¿½Üµï¿½ï¿½ï¿?,ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ç±ï¿½Ê¾Ã¿ï¿½ï¿½cardï¿½Äµï¿½ï¿½ï¿½ï¿½ï¿½Ð¡
    
/*
    void setForceCombi(int force_combi) {
		m_force_combi = force_combi;
*/  //ï¿½ï¿½ï¿½ï¿½Ô­ï¿½ï¿½ï¿½ï¿½×¢ï¿½Íµï¿½ï¿½Ë£ï¿½ï¿½ï¿½ï¿½Ò¾ï¿½ï¿½Ã¿ï¿½ï¿½Ô²ï¿½ï¿½ï¿½×¢ï¿½Íµï¿½ï¿½ï¿½
 
    void setTotalNumber(int total_number){m_total_number = total_number;}
    bool getMudFight() const {return m_mudfight;}//ï¿½ï¿½ï¿½ï¿½Æ¬ï¿½Ç·ï¿½ï¿½Üµï¿½mudfightï¿½ï¿½Ó°ï¿½ï¿½ 
    void setMudFight(bool mudfight) {
		m_mudfight = mudfight;
        setFirstCompleted(0);
	}//ï¿½ï¿½ï¿½Ã¿ï¿½ï¿½ï¿½ï¿½Ç·ï¿½ï¿½Üµï¿½mudfightï¿½ï¿½Ó°ï¿½ï¿½ 

    bool getBlindBluff(){return m_blindbluff;}
    void setBlindBluff(bool blindbluff) {m_blindbluff = blindbluff;}
    int getFirstCompleted() const {return m_first_completed;}//ï¿½ï¿½È¡ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½Éµï¿½ï¿½ï¿½Ï±ï¿½Ö¾ 
    void setFirstCompleted(int premier_complet) {m_first_completed = premier_complet;}//ï¿½ï¿½ï¿½Ãµï¿½Ò»ï¿½ï¿½ï¿½ï¿½Éµï¿½ï¿½ï¿½Ï±ï¿½Ö¾ 
    int calculateForceCombi();//ï¿½ï¿½ï¿½Ú¼ï¿½ï¿½ã¿¨ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ 

//ï¿½Ãºï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Æ¬ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ó¿ï¿½Æ¬ï¿½ï¿? 
    void addCard(ClanCard* card) {
        if (m_mudfight) {
            if (m_cards.size() == 4)//ï¿½Ñ¾ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Æ¾Í²ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ 
                throw std::invalid_argument("ï¿½ï¿½ï¿½Þ·ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ó³ï¿½ï¿½ï¿?4ï¿½Å¿ï¿½Æ¬");
            else{
                m_cards.push_back(card);//ï¿½ï¿½ï¿½Ó¿ï¿½Æ¬ 
                setTotalNumber(getTotalNumber() + static_cast<int>(card->getNumber()));
                //ï¿½ï¿½ï¿½Â¿ï¿½Æ¬ï¿½ï¿½Ïµï¿½ï¿½Üµï¿½ï¿½ï¿? 
            }
        }//ï¿½ï¿½ï¿½Ïµï¿½ï¿½ï¿½ï¿½Üµï¿½mudfightï¿½ï¿½Ó°ï¿½ï¿½ ï¿½Í²ï¿½È¡ï¿½ï¿½Ð©ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½È»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ 
        else{
            if (m_cards.size() == 3)throw std::invalid_argument("ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ã»ï¿½ï¿½ï¿½à½¬Õ½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ó³ï¿½ï¿½ï¿½3ï¿½Å¿ï¿½Æ¬");
            else{
                m_cards.push_back(card);
                //cout << getTotalPuissance() + static_cast<int>(card->getPuissance()) << endl;ï¿½ï¿½Ò»ï¿½ï¿½Ò²ï¿½ï¿½Ô­ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½×¢ï¿½Íµï¿½ï¿½ï¿½
                setTotalNumber(getTotalNumber() + static_cast<int>(card->getNumber()));   
            }
        }
        if (m_blindbluff) m_force_combi = 0;
        //ï¿½ï¿½ï¿½ï¿½Üµï¿½BlindBluffÕ½ï¿½ï¿½ï¿½ï¿½Ó°ï¿½ï¿½,ï¿½ï¿½ï¿½ï¿½ï¿½Ò²ï¿½Öªï¿½ï¿½ÎªÊ²Ã´Òªï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Îª0ï¿½ï¿½Ã¤ï¿½ï¿½ï¿½Æ¾Öµï¿½ï¿½ï¿½
        //ï¿½ï¿½ï¿½ï¿½Ö»ï¿½È½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ÆµÄ´ï¿½Ð¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ÎªÊ²Ã´ï¿½ï¿½ï¿½ï¿½Îª0     
        else m_force_combi = calculateForceCombi();
    }


};

